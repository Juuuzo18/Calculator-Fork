{"version":3,"sources":["components/Header.jsx","components/Attribute.jsx","components/Display.jsx","components/ToggleButtons.jsx","components/Boosts.jsx","components/Footer.jsx","components/CustomSwitch.jsx","components/Checkbox.jsx","components/Table.jsx","tabs/Smithing.jsx","tabs/Crafting.jsx","tabs/Cooking.jsx","tabs/Tailoring.jsx","tabs/Mining.jsx","tabs/Woodcutting.jsx","tabs/Fishing.jsx","tabs/Combat.jsx","Home.jsx","App.js","index.js"],"names":["Header","title","currentTheme","updateTheme","AppBar","position","Toolbar","Typography","variant","color","noWrap","Attribute","maxValue","attributeName","updateAttribute","updateAttribute2","isCurrentLevel","React","useState","attribute","setAttribute","attribute2","setAttribute2","Box","sx","display","alignItems","justifyContent","TextField","label","type","value","onFocus","event","target","select","onChange","currentValue","newValue","finalValue","Math","floor","checkAndUpdateValue","valueAsNumber","margin","maxWidth","minWidth","InputProps","endAdornment","InputAdornment","onBlur","console","log","Number","isNaN","checkAndUpdateValue2","Display","level","levelPercentage","targetLevel","element","boosts","keywords","applyBoostOnSmelt","buyOrSmeltBars","skill","lolliPrice","expData","setExp","expGap","setExpGap","isBusy","setBusy","addCommas","num","toString","replace","calculateElementXpBoost","elementXP","i","length","active","useEffect","fetch","then","response","ok","json","data","catch","error","currentLevelExp","parseInt","targetLevelExp","ceil","flexWrap","parseFloat","List","dense","ListItem","ListItemText","primary","secondary","Object","keys","map","subelement","StyledToggleButtonGroup","styled","ToggleButtonGroup","theme","borderColor","borderRadius","spacing","shape","ToggleButtons","updateElement","skillsData","currentLevel","selectedElement","setSelectedElement","handleChange","newElement","currentTarget","createCombatButtons","levelRange","marginBottom","marginLeft","marginRight","Accordion","AccordionSummary","expandIcon","id","AccordionDetails","size","exclusive","padding","ToggleButton","onClick","src","width","height","alt","undefined","marginTop","disabled","Boosts","updateBoosts","selectedBoost","setSelectedBoost","boostName","boostsCopy","name","boost","Footer","component","Container","align","Link","href","rel","Date","getFullYear","Div","typography","button","CustomSwitch","updateValue","falseText","trueText","Grid","container","flexGrow","item","Switch","BoostCheckbox","updateApplyBoostOnSmelt","FormGroup","FormControlLabel","control","Checkbox","checked","createData","code","population","density","Smithing","setCurrentLevel","currentPercentage","setCurrentPercentage","setTargetLevel","setElement","artisanData","setArtisanData","boostsDidUpdate","setBoostDidUpdate","setBoosts","setApplyBoostOnSmelt","setBuyOrSmeltBars","Crafting","updatedBoostName","Cooking","selectFoodOrBait","setSelectFoodOrBait","Tailoring","Mining","gatheringData","setGatheringData","Woodcutting","Fishing","setLolliPrice","selectFishOrBait","setSelectFishOrBait","Combat","monster","setMonster","monsterData","setMonsterData","Alert","severity","Home","props","match","history","updateCurrentTheme","page","params","tabNameToIndex","smithing","crafting","cooking","tailoring","mining","woodcutting","fishing","combat","selectedTab","setSelectedTab","borderBottom","Tabs","push","Tab","App","exact","from","to","path","render","createTheme","palette","mode","rootElement","document","getElementById","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.023c6b64.chunk.js","sourcesContent":["import AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n// import IconButton from '@mui/material/IconButton';\n// import Brightness4Icon from '@mui/icons-material/Brightness4';\n// import Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst Header = ( {title, currentTheme, updateTheme} ) => {\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          {title}\n          {/* <IconButton\n            sx={{ ml: 1 }}\n            onClick={updateTheme}\n            color=\"inherit\"\n          >\n            {currentTheme === \"dark\" ? (\n              <Brightness7Icon />\n            ) : (\n              <Brightness4Icon />\n            )}\n          </IconButton> */}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n// import { styled } from \"@mui/material/styles\";\n// import Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\n\nconst Attribute = ({\n  maxValue,\n  attributeName,\n  updateAttribute,\n  updateAttribute2,\n  isCurrentLevel,\n}) => {\n  const [attribute, setAttribute] = React.useState(null);\n  const [attribute2, setAttribute2] = React.useState(0);\n\n  const checkAndUpdateValue = (currentValue, newValue) => {\n    let finalValue;\n    newValue = Math.floor(newValue);\n    // console.log(currentValue, newValue);\n    // Check if value is above minimum or equal to undefined (when input is empty)\n    if (newValue > 0 || newValue === null) {\n      // Check if value is less than maximum\n      if (currentValue > maxValue || newValue >= maxValue) {\n        finalValue = maxValue;\n        setAttribute(maxValue);\n      } else {\n        finalValue = newValue;\n        setAttribute(finalValue);\n      }\n    } else if (newValue < 0) {\n      // console.log(newValue);\n      finalValue = 0;\n      setAttribute(0);\n    } else {\n      setAttribute(newValue);\n      finalValue = newValue;\n    }\n    // Update parent component attribute and attribute 2\n    updateAttribute(finalValue);\n  };\n\n  const checkAndUpdateValue2 = (currentValue, newValue, maxValue) => {\n    let finalValue;\n    // console.log('maxValue:', maxValue);\n    // console.log('maxValue:', maxValue);\n    newValue = Math.floor(newValue);\n    // console.log(currentValue, newValue);\n    // Check if value is above minimum or equal to undefined (when input is empty)\n    if (newValue > 0 || newValue === null) {\n      // Check if value is less than maximum\n      if (currentValue > maxValue || newValue >= maxValue) {\n        finalValue = maxValue;\n        setAttribute2(maxValue);\n      } else {\n        finalValue = newValue;\n        setAttribute2(finalValue);\n      }\n    } else if (newValue < 0) {\n      // console.log(newValue);\n      finalValue = 0;\n      setAttribute2(0);\n    } else {\n      setAttribute2(newValue);\n      finalValue = newValue;\n    }\n    // Update parent component attribute 2\n    updateAttribute2(finalValue);\n  };\n\n  const checkIfNaN = (value) => {\n    console.log(\"Value: \", value);\n    if (Number.isNaN(value)) {\n      // Update attribute 2\n      setAttribute2(0);\n      // Update parent component attribute 2\n      updateAttribute2(0);\n    }\n    // else {\n    //   // Update parent component attribute 2\n    //   updateAttribute2(value);\n    // }\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {/* <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          className={styles.button}\n          // href=\"#outlined-buttons\"\n          onClick={() => {\n            checkAndUpdateValue(attribute, attribute - 1, true);\n            // setAttribute(newAttribute);\n            // updateAttribute(newAttribute);\n          }}\n        >\n          -\n        </Button> */}\n        <TextField\n          label={attributeName}\n          type=\"number\"\n          // defaultValue=\"1\"\n          value={attribute}\n          onFocus={(event) => {\n            event.target.select();\n          }}\n          // Remove initial zero\n          // value={('' + attribute).replace(/^0+/, '')}\n          onChange={function (event) {\n            checkAndUpdateValue(attribute, event.target.valueAsNumber);\n            // updateAttribute(newAttribute);\n          }}\n          sx={{\n            \"& > :not(style)\": {\n              margin: 1,\n              // marginTop: 3,\n              maxWidth: \"25ch\",\n              minWidth: \"25ch\",\n            },\n            // display: flex,\n            // \"justify-content\": center,\n            // \"align-items\": center,\n            // alignItems: \"center\",\n          }}\n        />\n        {isCurrentLevel ? (\n          <TextField\n            // label=\"\"\n            type=\"number\"\n            // defaultValue=\"0\"\n            value={attribute2}\n            InputProps={{\n              endAdornment: <InputAdornment>%</InputAdornment>,\n            }}\n            onFocus={(event) => {\n              event.target.select();\n            }}\n            // onBlur={checkIfNaN(event.target.valueAsNumber)}\n            onBlur={function (event) {\n              checkIfNaN(event.target.valueAsNumber);\n              // updateAttribute(newAttribute);\n            }}\n            // Remove initial zero\n            // value={('' + attribute).replace(/^0+/, '')}\n            onChange={function (event) {\n              checkAndUpdateValue2(attribute2, event.target.valueAsNumber, 99);\n              // updateAttribute(newAttribute);\n            }}\n            sx={{\n              \"& > :not(style)\": {\n                margin: 1,\n                // marginTop: 3,\n                // width: \"69ch\",\n                minWidth: \"8ch\",\n                maxWidth: \"8ch\",\n              },\n              // display: flex,\n              // \"justify-content\": center,\n              // \"align-items\": center,\n              // alignItems: \"center\",\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        {/* <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          className={styles.button}\n          // href=\"#outlined-buttons\"\n          onClick={() => {\n            checkAndUpdateValue(attribute, attribute + 1, true);\n            // setAttribute(newAttribute);\n            // updateAttribute(newAttribute);\n          }}\n        >\n          +\n        </Button> */}\n      </Box>\n    </>\n  );\n};\n\nexport default Attribute;\n","import React from \"react\";\n// import Paper from '@mui/material/Paper';\n\n// import { styled } from \"@mui/material/styles\";\n// import Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nconst Display = ({\n  level,\n  levelPercentage,\n  targetLevel,\n  element,\n  boosts,\n  keywords,\n  applyBoostOnSmelt,\n  buyOrSmeltBars,\n  skill,\n  lolliPrice,\n}) => {\n  const [expData, setExp] = React.useState({});\n  const [expGap, setExpGap] = React.useState(0);\n  const [isBusy, setBusy] = React.useState(true);\n\n  const addCommas = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const calculateElementXpBoost = (elementXP) => {\n    for (let i = 0; i < boosts.length; i++) {\n      if (boosts[i].active) {\n        elementXP *= boosts[i].value;\n      }\n    }\n    return Math.floor(elementXP);\n  };\n\n  // const addIcon = (skillName, elementName) => {\n  //   return (\n  //     // <Box\n  //     //   sx={{\n  //     //     // marginRight: 4,\n  //     //   }}\n  //     // >\n  //       <img\n  //         src={`/images/${skillName}/${elementName}.gif`}\n  //         width=\"22\"\n  //         height=\"22\"\n  //         value={elementName}\n  //         alt=\"\"\n  //       />\n  //     // </Box>\n  //   )\n  // }\n\n  // Request Exp data from back end\n  React.useEffect(() => {\n    // fetch(\"http://localhost:8000/exp\")\n    fetch(\"https://coa-calculator-backend.herokuapp.com/exp\")\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        setBusy(false);\n        setExp(data);\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch exp data:\", error);\n      });\n  }, []);\n\n  React.useEffect(() => {\n    if (!isBusy) {\n      const currentLevelExp =\n        parseInt(expData[level]) +\n        (parseInt(expData[level + 1]) - parseInt(expData[level])) *\n        levelPercentage;\n      const targetLevelExp = expData[targetLevel];\n      setExpGap(Math.ceil(targetLevelExp - currentLevelExp));\n    }\n    // eslint-disable-next-line\n  }, [expData, level, targetLevel, levelPercentage]);\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          // flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          // border: 1,\n          // maxWidth: 1000,\n        }}\n      >\n        {expGap <= 0 || isNaN(parseFloat(expGap)) ? (\n          <></>\n        ) : (\n          <List dense={true}>\n            <ListItem>\n              <ListItemText\n                primary={\"Total exp: \" + addCommas(expGap)}\n                secondary=\"\"\n              />\n            </ListItem>\n            <ListItem>\n              {/* Render total number of selected attribute */}\n              {/* Render empty component if no element is selected */}\n              {element[0] === 'loading' ? (\n                <></>\n              ) : skill === \"Combat\" ? (\n                <ListItemText\n                  primary={\n                    \"Total \" +\n                    element[0] +\n                    \": \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap /\n                        (calculateElementXpBoost(element[1][\"xp\"]))\n                      )\n                    ) + \" (\" + element[1][\"xp\"] + \" exp per kill)\"\n                  }\n                />\n              ) : skill === \"Smithing\" ? (\n                // Render results for Smithing\n                buyOrSmeltBars ? (\n                  // Don't include smelting XP\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" \" +\n                      keywords[0] +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                          calculateElementXpBoost(element[1][\"xp-forge\"])\n                        )\n                      )\n                    }\n                  />\n                ) : applyBoostOnSmelt ? (\n                  // Include and apply Boosts on bar Smelting\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" \" +\n                      keywords[0] +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                          (calculateElementXpBoost(element[1][\"xp-forge\"]) +\n                            calculateElementXpBoost(element[1][\"xp-smelt\"]))\n                        )\n                      )\n                    }\n                  />\n                ) : (\n                  // Include but don't apply Boosts on bar Smelting\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" \" +\n                      keywords[0] +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                          (calculateElementXpBoost(element[1][\"xp-forge\"]) +\n                            parseFloat(element[1][\"xp-smelt\"]))\n                        )\n                      )\n                    }\n                  />\n                )\n              ) : skill === \"Crafting\" ? (\n                // Render results for Crafting\n                // Cursed relics exception\n                element[0] === \"Cursed\" ? (\n                  // <>\n                    <ListItemText\n                      primary={\n                        \"Total \" +\n                        element[0] +\n                        \" Relics: \" +\n                        addCommas(\n                          Math.ceil(\n                            expGap / calculateElementXpBoost(element[1][\"xp\"])\n                          )\n                        )\n                        // addCommas(Math.ceil(expGap / calculateElementXpBoost(element[1][\"xp\"])))\n                      }\n                    />\n                    // {/* {addIcon(skill, element[0])} */}\n                    // {/* <ListItem> */}\n                      // {/* </ListItem> */}\n                  // {/* </> */}\n                ) : (\n                  // <>\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      keywords[0] +\n                      \" \" +\n                      element[0] +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap / calculateElementXpBoost(element[1][\"xp\"])\n                        )\n                      )\n                    }\n                  />\n                  // {/* <ListItem> */}\n                  // {/* {addIcon(skill, element[0])} */}\n                  // {/* </ListItem> */}\n                  // {/* </> */}\n                )\n              ) : (\n                // Render results for Cooking\n                <ListItemText\n                  primary={\n                    \"Total \" +\n                    keywords[0] +\n                    \" \" +\n                    element[0] +\n                    \": \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap / calculateElementXpBoost(element[1][\"xp\"])\n                      )\n                    )\n                  }\n                />\n              )}\n            </ListItem>\n\n            {/* Render subelements */}\n            {element[0] === 'loading' ? (\n              <></>\n            ) : (skill === \"Combat\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Total gold: \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap /\n                        calculateElementXpBoost(\n                          element[1][\"xp\"]\n                        )\n                      ) * element[1][\"gold\"]\n                    ) + \" (\" + element[1][\"gold\"] + \" gold per kill)\"\n                  }\n                />\n              </ListItem>\n            ) : (Object.keys(element[1][\"submaterials\"]).map((subelement) => (\n              <ListItem>\n                {skill === \"Smithing\" ? (\n                  // Don't include smelting XP\n                  buyOrSmeltBars ? (\n                    <ListItemText\n                      primary={\n                        \"Total \" +\n                        subelement +\n                        \": \" +\n                        addCommas(\n                          Math.ceil(\n                            expGap /\n                            calculateElementXpBoost(\n                              element[1][\"xp-forge\"]\n                            )\n                          ) * element[1][\"submaterials\"][subelement]\n                        )\n                      }\n                    />\n                  ) : applyBoostOnSmelt ? (\n                    // Include AND boost smelting XP\n                    <ListItemText\n                      primary={\n                        \"Total \" +\n                        subelement +\n                        \": \" +\n                        addCommas(\n                          Math.ceil(\n                            expGap /\n                            (calculateElementXpBoost(\n                              element[1][\"xp-forge\"]\n                            ) +\n                              calculateElementXpBoost(\n                                element[1][\"xp-smelt\"]\n                              ))\n                          ) * element[1][\"submaterials\"][subelement]\n                        )\n                      }\n                    />\n                  ) : (\n                    // Include but DO NOT boost Smelting XP\n                    <ListItemText\n                      primary={\n                        \"Total \" +\n                        subelement +\n                        \": \" +\n                        addCommas(\n                          Math.ceil(\n                            expGap /\n                            (calculateElementXpBoost(\n                              element[1][\"xp-forge\"]\n                            ) +\n                              parseFloat(element[1][\"xp-smelt\"]))\n                          ) * element[1][\"submaterials\"][subelement]\n                        )\n                      }\n                    />\n                  )\n                ) : (\n                  <>\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      subelement +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap / calculateElementXpBoost(element[1][\"xp\"])\n                        ) * element[1][\"submaterials\"][subelement]\n                      )\n                    }\n                  />\n                  {/* {addIcon(\"Woodcutting\", subelement)} */}\n                  </>\n                )}\n              </ListItem>\n            ))))}\n\n            {/* Render number of inventories */}\n            {/* Render empty component if no element is selected */}\n            {element[0] === \"loading\" ? (\n              <></>\n            ) : skill === \"Crafting\" ? (\n              element[0] === \"Cursed\" || element[0] === \"Experience\" ? (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (18 per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                          calculateElementXpBoost(element[1][\"xp\"]) /\n                          18\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n              ) : (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (36 per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                          calculateElementXpBoost(element[1][\"xp\"]) /\n                          36\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n              )\n            ) : skill === \"Cooking\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Inventories (18 fish and 18 salt): \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap /\n                        calculateElementXpBoost(element[1][\"xp\"]) /\n                        18\n                      )\n                    )\n                  }\n                />\n              </ListItem>\n            ) : skill === \"Mining\" || skill === \"Woodcutting\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Inventories (36 per inventory): \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap /\n                        calculateElementXpBoost(element[1][\"xp\"]) /\n                        36\n                      )\n                    )\n                  }\n                />\n              </ListItem>\n            ) : skill === \"Fishing\" && element[0] === \"Bass bait\" ? (\n              <>\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Total Remote Bank (34 bass per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                          calculateElementXpBoost(element[1][\"xp\"]) /\n                          34\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Total Remote Bank price: \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                          calculateElementXpBoost(element[1][\"xp\"]) /\n                          34\n                          * parseInt(lolliPrice) * 0.4)\n                      ) + \" Gold\"\n                    }\n                  />\n                </ListItem>\n              </>\n            ) : (\n              <></>\n            )}\n          </List>\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { Box } from \"@mui/material\";\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Typography from '@mui/material/Typography';\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  \"&.Mui-selected\": {\n    borderColor: \"#2e7d32\",\n    borderRadius: 9,\n  },\n  \"& .MuiToggleButtonGroup-grouped\": {\n    margin: theme.spacing(0.5),\n    borderRadius: theme.shape.borderRadius,\n    borderColor: \"#bdbdbd\",\n    \"&.Mui-disabled\": {},\n    \"&:not(:first-of-type)\": {\n      borderRadius: theme.shape.borderRadius,\n      borderColor: \"#bdbdbd\",\n    },\n    \"&:first-of-type\": {\n      borderRadius: theme.shape.borderRadius,\n      borderColor: \"#bdbdbd\",\n    },\n  },\n}));\n\n\n\nconst ToggleButtons = ({ updateElement, skillsData, skill, currentLevel }) => {\n  const [selectedElement, setSelectedElement] = React.useState();\n\n  const handleChange = (event, newElement) => {\n    if (event.currentTarget.value !== \"loading\") {\n      // setSelectedElement(event.currentTarget.value);\n      setSelectedElement(newElement);\n      // console.log(newElement, selectedElement);\n      if (newElement === null) {\n        updateElement(['loading']);\n      } else {\n        // console.log(currentLevel);\n        // console.log(skillsData['Crafting']['Wealth']['level']);\n        // console.log(\"Skills data: \", currentLevel >= parseInt(skillsData[skill]['Gold']['level']));\n        updateElement([\n          event.currentTarget.value,\n          skillsData[skill][event.currentTarget.value],\n        ]);\n      }\n    }\n  };\n\n  const createCombatButtons = (levelRange) => {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          maxWidth: 600,\n          marginBottom: 0.4,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      >\n\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography>Level {levelRange[0]}-{levelRange[1]}</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {Object.keys(skillsData[skill]).map((attribute) =>\n              parseInt(skillsData[skill][attribute]['level']) >= levelRange[0] && parseInt(skillsData[skill][attribute]['level']) <= levelRange[1] ? (\n                <StyledToggleButtonGroup\n                  size=\"small\"\n                  value={selectedElement}\n                  exclusive\n                  onChange={handleChange}\n                  sx={{\n                    padding: 0,\n                  }}\n                >\n                  <ToggleButton\n                    value={attribute}\n                    onClick={handleChange}\n                    sx={{\n                      \"& > :not(style)\": {\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      },\n                    }}\n                  >\n                    <Box\n                      sx={{\n                        marginRight: 0.4,\n                      }}\n                    >\n                      <img\n                        src={`/images/${skill}/${attribute}.gif`}\n                        width=\"22\"\n                        height=\"22\"\n                        value={attribute}\n                        alt=\"\"\n                      />\n                    </Box>\n                    {attribute}\n                  </ToggleButton>\n                </StyledToggleButtonGroup>\n              ) : (\n                <></>\n              )\n            )}\n          </AccordionDetails>\n        </Accordion>\n      </Box>\n    )\n  }\n\n  return (\n    <Box\n      sx={{\n        \"& > :not(style)\": {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          maxWidth: 450,\n          // marginBottom: 1,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        },\n      }}\n    >\n      {skillsData[skill] !== undefined ? (\n        // Custom accordion for Combat\n        skill === 'Combat' ? (\n          <Box\n            sx={{\n              marginTop: 2,\n              marginBottom: 3\n            }}\n          >\n            {createCombatButtons([1, 50])}\n            {createCombatButtons([51, 70])}\n            {createCombatButtons([71, 90])}\n            {createCombatButtons([91, 150])}\n          </Box>\n        ) : (\n          // All of other skill's buttons\n          <StyledToggleButtonGroup\n            size=\"small\"\n            value={selectedElement}\n            exclusive\n            onChange={handleChange}\n            sx={{\n              padding: 1,\n            }}\n          >\n            {Object.keys(skillsData[skill]).map((element) =>\n              currentLevel >= parseInt(skillsData[skill][element]['level']) ? (\n                <ToggleButton\n                  value={element}\n                  onClick={handleChange}\n                  sx={{\n\n                    \"& > :not(style)\": {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    },\n                  }}\n                >\n                  <Box\n                    sx={{\n                      marginRight: 0.4,\n                    }}\n                  >\n                    <img\n                      src={`/images/${skill}/${element}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={element}\n                      alt=\"\"\n                    />\n                  </Box>\n                  {element}\n                </ToggleButton>\n              ) : (\n                <ToggleButton\n                  value={element}\n                  disabled\n                  sx={{\n                    \"& > :not(style)\": {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    },\n                  }}\n                >\n                  <Box\n                    sx={{\n                      marginRight: 0.4,\n                    }}\n                  >\n                    <img\n                      src={`/images/${skill}/Gray ${element}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={element}\n                      alt=\"\"\n                    />\n                  </Box>\n                  {element}\n                </ToggleButton>\n              )\n            )}\n          </StyledToggleButtonGroup>\n        )) : (\n        <ToggleButton value=\"loading\" >Loading...</ToggleButton>\n      )\n      }\n    </Box >\n  );\n};\n\nexport default ToggleButtons;\n","import React from \"react\";\n\n// import FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Box from \"@mui/material/Box\";\nimport { ToggleButton } from \"@mui/material\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  \"& .Mui-selected\": {\n    color: \"error\",\n  },\n  \"& .MuiToggleButtonGroup-grouped\": {\n    // margin: theme.spacing(0.5),\n    borderColor: \"#bdbdbd\",\n    // border:1,\n    // \"&.Mui-disabled\": {\n    //   // border: 1,\n    // },\n    \"&:not(:first-of-type)\": {\n      // borderRadius: theme.shape.borderRadius,\n      // borderLeft: 1,\n      // borderColor: \"#bdbdbd\",\n    },\n    \"&:first-of-type\": {\n      marginLeft: theme.spacing(1),\n      // borderRadius: theme.shape.borderRadius,\n      // borderColor: \"#bdbdbd\",\n    },\n    \"&:last-of-type\": {\n      marginRight: theme.spacing(1),\n      // borderRadius: theme.shape.borderRadius,\n      // borderColor: \"#bdbdbd\",\n    },\n  },\n}));\n\nconst Boosts = ({ boosts, updateBoosts }) => {\n  const [selectedBoost, setSelectedBoost] = React.useState([]);\n\n  const handleChange = (event, boostName) => {\n    // console.log(boosts, boostName);\n    setSelectedBoost(boostName);\n    let boostsCopy = boosts;\n    for (let i = 0; i < boostsCopy.length; i++) {\n      if (boostsCopy[i].name === event.currentTarget.value) {\n        // console.log(\"boosts active:\", boosts[i].active);\n        boostsCopy[i].active = !boosts[i].active;\n      }\n    }\n    // console.log('boosts:', boostsCopy);\n    updateBoosts(boostsCopy);\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          marginBottom: 1,\n          marginTop: 1,\n        }}\n      >\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={selectedBoost}\n          // exclusive\n          onChange={handleChange}\n        // sx={{ border: 1, borderColor: \"#c4c4c4\", padding: 1 }}\n        >\n          {boosts !== undefined ? (\n            boosts.map((boost) => (\n              <ToggleButton\n                value={boost.name}\n                sx={{\n                  \"& > :not(style)\": {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    // border: 1,\n                  },\n                }}\n              >\n                <Box\n                  sx={{\n                    marginRight: 0.4,\n                  }}\n                >\n                  {boost.name === 'Small or Medium Exp Pot' ? (\n                    <img\n                      src={`/images/Boosts/${boost.name}.gif`}\n                      width=\"27\"\n                      height=\"22\"\n                      value={boost.name}\n                      onClick={handleChange}\n                      alt=\"\"\n                    />\n                  ) : (\n                    <img\n                      src={`/images/Boosts/${boost.name}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={boost.name}\n                      onClick={handleChange}\n                      alt=\"\"\n                    />\n                  )}\n                </Box>\n                {boost.name +\n                  \" (+\" +\n                  Math.floor((boost.value - 1) * 100) +\n                  \"%)\"}\n              </ToggleButton>\n\n            ))\n          ) : (\n            <></>\n          )}\n        </StyledToggleButtonGroup>\n      </Box>\n    </>\n  );\n};\n\nexport default Boosts;\n","import Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Link from \"@mui/material/Link\";\n\nconst Footer = () => {\n  return (\n    <Box component=\"footer\" sx={{ marginTop: 5, marginBottom: 2 }}>\n      <Container maxWidth=\"lg\">\n        <Typography\n          variant=\"body2\"\n          align=\"center\"\n          color=\"text.secondary\"\n          component=\"p\"\n        >\n          Bugs? Suggestions? DM me on Discord:{\" \"}\n          <Link\n            color=\"inherit\"\n            href=\"https://discordapp.com/users/chends#7176\"\n            rel=\"noopener\"\n            target=\"_blank\"\n          >\n            chends#7176\n          </Link>\n        </Typography>\n        <Typography\n          variant=\"body2\"\n          align=\"center\"\n          color=\"text.secondary\"\n          component=\"p\"\n        >\n          Huge thanks to the contributor:{\" \"}\n          <Link\n            color=\"inherit\"\n            href=\"https://discordapp.com/users/KaMaL#9365\"\n            rel=\"noopener\"\n            target=\"_blank\"\n          >\n            KaMaL#9365\n          </Link>\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          {\"All data from \"}\n          <Link\n            color=\"inherit\"\n            href=\"https://www.curseofaros.com/\"\n            rel=\"noopener\"\n            target=\"_blank\"\n          >\n            Curse of Aros\n          </Link>{\" \"}\n          {new Date().getFullYear()}\n          {\".\"}\n        </Typography>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport { styled } from \"@mui/material/styles\";\n\n// const Item = styled(Paper)(({ theme }) => ({\n//   ...theme.typography.body2,\n//   padding: theme.spacing(1),\n//   textAlign: \"center\",\n//   color: theme.palette.text.secondary,\n// }));\n\nconst Div = styled(\"div\")(({ theme }) => ({\n  ...theme.typography.button,\n  //   backgroundColor: theme.palette.background.paper,\n  //   padding: theme.spacing(1),\n}));\n\nconst CustomSwitch = ({ value, updateValue, falseText, trueText }) => {\n  const handleChange = () => {\n    updateValue(!value);\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        // maxWidth: \"100\",\n      }}\n    >\n      <Grid\n        // component=\"label\"\n        container\n        sx={{\n          // display: \"flex\",\n          flexGrow: 1,\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginBottom: 1,\n          marginTop: 1,\n        }}\n        spacing={0}\n      >\n        <Div>{falseText}</Div>\n        <Grid item>\n          <Switch\n            // checked={} // relevant state for your case\n            onChange={handleChange} // relevant method to handle your change\n            color=\"default\"\n          />\n        </Grid>\n        <Div>{trueText}</Div>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CustomSwitch;\n","import Checkbox from \"@mui/material/Checkbox\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Box from \"@mui/material/Box\";\n\nconst BoostCheckbox = ({ applyBoostOnSmelt, updateApplyBoostOnSmelt }) => {\n  const handleChange = () => {\n    updateApplyBoostOnSmelt(!applyBoostOnSmelt);\n  };\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        // maxWidth: \"100\",\n      }}\n    >\n      <FormGroup>\n        <FormControlLabel\n          control={\n            <Checkbox checked={applyBoostOnSmelt} onChange={handleChange} />\n          }\n          label=\"Apply Boosts on bar Smelting\"\n        />\n        {/* <FormControlLabel disabled control={<Checkbox />} label=\"Disabled\" /> */}\n      </FormGroup>\n    </Box>\n  );\n};\n\nexport default BoostCheckbox;\n","import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\n  {\n    id: 'population',\n    label: 'Population',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'size',\n    label: 'Size\\u00a0(km\\u00b2)',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'density',\n    label: 'Density',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toFixed(2),\n  },\n];\n\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return { name, code, population, size, density };\n}\n\nconst rows = [\n  createData('India', 'IN', 1324171354, 3287263),\n  createData('China', 'CN', 1403500365, 9596961),\n  createData('Italy', 'IT', 60483973, 301340),\n  createData('United States', 'US', 327167434, 9833520),\n  createData('Canada', 'CA', 37602103, 9984670),\n  createData('Australia', 'AU', 25475400, 7692024),\n  createData('Germany', 'DE', 83019200, 357578),\n  createData('Ireland', 'IE', 4857000, 70273),\n  createData('Mexico', 'MX', 126577691, 1972550),\n  createData('Japan', 'JP', 126317000, 377973),\n  createData('France', 'FR', 67022000, 640679),\n  createData('United Kingdom', 'GB', 67545757, 242495),\n  createData('Russia', 'RU', 146793744, 17098246),\n  createData('Nigeria', 'NG', 200962417, 923768),\n  createData('Brazil', 'BR', 210147125, 8515767),\n];\n\nexport default function StickyHeadTable() {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  // const handleChangePage = (event, newPage) => {\n  //   setPage(newPage);\n  // };\n\n  // const handleChangeRowsPerPage = (event) => {\n  //   setRowsPerPage(+event.target.value);\n  //   setPage(0);\n  // };\n\n  return (\n    <Paper\n      sx={{\n        maxWidth: 650,\n        overflow: 'hidden',\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n      }}  \n    >\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}","import React, { useState } from \"react\";\n\nimport \"../App.css\";\n// import Slider from \"./components/Slider\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\nimport BoostCheckbox from \"../components/Checkbox\";\nimport StickyHeadTable from \"../components/Table\";\n\nconst Smithing = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    // console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Smithing data\n  const [artisanData, setArtisanData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n    { name: \"Infernal Ring\", value: 1.04, active: false },\n    { name: \"Infernal Hammer\", value: 1.04, active: false },\n  ]);\n  const updateBoosts = (boosts) => {\n    // const tempBoosts = moment(boosts);\n    setBoosts(boosts);\n    // this.forceUpdate();\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n  // Apply Boosts on bar smelting control\n  const [applyBoostOnSmelt, setApplyBoostOnSmelt] = useState(false);\n  const updateApplyBoostOnSmelt = (applyBoostOnSmelt) => {\n    // console.log(applyBoostOnSmelt);\n    setApplyBoostOnSmelt(applyBoostOnSmelt);\n  };\n  // Smelt or buy bars control\n  const [buyOrSmeltBars, setBuyOrSmeltBars] = useState(true);\n  const updateBuyOrSmeltBars = (buyOrSmeltBars) => {\n    // console.log(buyOrSmeltBars);\n    // console.log(buyOrSmeltBars);\n    setBuyOrSmeltBars(buyOrSmeltBars);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/artisan\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/artisan\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setArtisanData(data);\n        // console.log(\"set busy\");\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Artisan Skills data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Smithing Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Smithing Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Smithing\"\n        currentLevel={currentLevel}\n      />\n      <CustomSwitch\n        value={buyOrSmeltBars}\n        updateValue={updateBuyOrSmeltBars}\n        trueText=\"Smelt Bars\"\n        falseText=\"Buy Bars\"\n      />\n      <BoostCheckbox\n        applyBoostOnSmelt={applyBoostOnSmelt}\n        updateApplyBoostOnSmelt={updateApplyBoostOnSmelt}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"Bars\"]}\n        boosts={boosts}\n        applyBoostOnSmelt={applyBoostOnSmelt}\n        buyOrSmeltBars={buyOrSmeltBars}\n        skill=\"Smithing\"\n        boostsDidUpdate={boostsDidUpdate}\n      />\n      {/* <StickyHeadTable/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Smithing;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\n// import Slider from \"./components/Slider\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nconst Crafting = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    // console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Crafting data\n  const [artisanData, setArtisanData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/artisan\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/artisan\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setArtisanData(data);\n        // console.log(\"set busy\");\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Artisan Skills data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Crafting Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Crafting Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Crafting\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"Relics of\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Crafting\"\n      />\n      {/* <Slider sliderName={\"Your Smithing XP\"}/>\n      <Slider sliderName={\"Ore 1\"}/>\n      <Slider sliderName={\"Ore 2\"}/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Crafting;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\n\nconst Cooking = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    // console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Cooking data\n  const [artisanData, setArtisanData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n\n  // Select foods or baits\n  const [selectFoodOrBait, setSelectFoodOrBait] = useState(false);\n  const updateselectFoodOrBait = (selectFoodOrBait) => {\n    // console.log(selectFoodOrBait);\n    setSelectFoodOrBait(selectFoodOrBait);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/artisan\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/artisan\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setArtisanData(data);\n        // console.log(\"set busy\");\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Artisan Skills data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Cooking Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Cooking Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      {selectFoodOrBait === true ? (\n        // Render food buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={artisanData}\n          skill=\"Cooking-Baits\"\n          currentLevel={currentLevel}\n        />\n      ) : (\n        // Render baits buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={artisanData}\n          skill=\"Cooking\"\n          currentLevel={currentLevel}\n        />\n      )}\n      <CustomSwitch\n        value={selectFoodOrBait}\n        updateValue={updateselectFoodOrBait}\n        falseText=\"Food\"\n        trueText=\"Bait\"\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      {selectFoodOrBait === true ? (\n        // Results for food\n        <Display\n          level={currentLevel}\n          levelPercentage={currentPercentage}\n          targetLevel={targetLevel}\n          element={element}\n          keywords={[\"\"]}\n          boosts={boosts}\n          boostsDidUpdate={boostsDidUpdate}\n          skill=\"Cooking\"\n        />\n      ) : (\n        // Results for baits\n        <Display\n          level={currentLevel}\n          levelPercentage={currentPercentage}\n          targetLevel={targetLevel}\n          element={element}\n          keywords={[\"Cooked\"]}\n          boosts={boosts}\n          boostsDidUpdate={boostsDidUpdate}\n          skill=\"Cooking\"\n        />\n      )}\n      {/* <Slider sliderName={\"Your Smithing XP\"}/>\n      <Slider sliderName={\"Ore 1\"}/>\n      <Slider sliderName={\"Ore 2\"}/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Cooking;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\n// import Slider from \"./components/Slider\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nconst Tailoring = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    // console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Tailoring data\n  const [artisanData, setArtisanData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/artisan\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/artisan\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setArtisanData(data);\n        // console.log(\"set busy\");\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Artisan Skills data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Tailoring Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Tailoring Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Tailoring\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Tailoring\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Tailoring;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\n// import Slider from \"./components/Slider\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nconst Mining = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    // console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Mining data\n  const [gatheringData, setGatheringData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n    { name: \"Prospector's Necklace\", value: 1.05, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/gathering\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/gathering\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setGatheringData(data);\n        // console.log(\"set busy\");\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Gathering Skills data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Your Mining Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Target Mining Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={gatheringData}\n        skill=\"Mining\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Mining\"\n      />\n      {/* <Slider sliderName={\"Your Smithing XP\"}/>\n      <Slider sliderName={\"Ore 1\"}/>\n      <Slider sliderName={\"Ore 2\"}/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Mining;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\n// import Slider from \"./components/Slider\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nconst Woodcutting = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    // console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Woodcutting data\n  const [gatheringData, setGatheringData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/gathering\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/gathering\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setGatheringData(data);\n        // console.log(\"set busy\");\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Gathering Skills data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Your Woodcutting Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Target Woodcutting Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={gatheringData}\n        skill=\"Woodcutting\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Woodcutting\"\n      />\n      {/* <Slider sliderName={\"Your Smithing XP\"}/>\n      <Slider sliderName={\"Ore 1\"}/>\n      <Slider sliderName={\"Ore 2\"}/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Woodcutting;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\n// import Slider from \"./components/Slider\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\n\n\nconst Fishing = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n  // Lollipop price input, to calculate Remote Bank price\n  const [lolliPrice, setLolliPrice] = useState(0);\n  const updateLolliPrice = (lolliPrice) => {\n    setLolliPrice(lolliPrice);\n  };\n\n  // Fishing data\n  const [gatheringData, setGatheringData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n\n//   Select fished or baits\n  const [selectFishOrBait, setSelectFishOrBait] = useState(false);\n  const updateselectFishOrBait = (selectFishOrBait) => {\n    // console.log(selectFishOrBait);\n    setSelectFishOrBait(selectFishOrBait);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/gathering\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/gathering\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setGatheringData(data);\n        // console.log(\"set busy\");\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Gathering Skills data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Fishing Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Fishing Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      {selectFishOrBait === true ? (\n        // Render bait buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={gatheringData}\n          skill=\"Fishing-Baits\"\n          currentLevel={currentLevel}\n        />\n      ) : (\n        // Render fish buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={gatheringData}\n          skill=\"Fishing\"\n          currentLevel={currentLevel}\n        />\n      )}\n      <CustomSwitch\n        value={selectFishOrBait}\n        updateValue={updateselectFishOrBait}\n        falseText=\"Fish\"\n        trueText=\"Bait\"\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      { element[0] === 'Bass bait' ? (\n        <Attribute\n          maxValue={9999999999}\n          attributeName={\"Current Lolli Price\"}\n          updateAttribute={updateLolliPrice}\n          sx={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        />\n      ): (\n        <></>\n      )}\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Fishing\"\n        lolliPrice={lolliPrice}\n      />\n      {/* <Slider sliderName={\"Your Smithing XP\"}/>\n      <Slider sliderName={\"Ore 1\"}/>\n      <Slider sliderName={\"Ore 2\"}/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Fishing;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\n// import { styled } from \"@monster-ui/core/styles\";\n// import Slider from \"./components/Slider\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport Alert from '@mui/material/Alert';\n\n\n\n\nconst Combat = () => {\n  // Person's current level\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const updateCurrentLevel = (currentLevel) => {\n    setCurrentLevel(currentLevel);\n  };\n  // Person's current level percentage\n  const [currentPercentage, setCurrentPercentage] = useState(0);\n  const updateCurrentPercentage = (currentPercentage) => {\n    currentPercentage = currentPercentage / 100;\n    // console.log(\"update %\", currentPercentage);\n    setCurrentPercentage(currentPercentage);\n  };\n  // Person's target level\n  const [targetLevel, setTargetLevel] = useState(1);\n  const updateTargetLevel = (targetLevel) => {\n    setTargetLevel(targetLevel);\n  };\n  // Person's target monster\n  const [monster, setMonster] = useState(['loading']);\n  const updateMonster = (monster) => {\n    setMonster(monster);\n  };\n\n  // Monster data\n  const [monsterData, setMonsterData] = useState({});\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n    { name: \"Exp Relic\", value: 1.05, active: false },\n    { name: \"Small or Medium Exp Pot\", value: 1.05, active: false },\n    { name: \"Large Exp Pot\", value: 1.1, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n    // console.log(\"Boosts update\", updatedBoostName);\n  };\n\n  React.useEffect(() => {\n    // Custom url depending if on develop or prod server\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      var url = \"http://localhost:8000/monsters\";\n    } else {\n      var url = \"https://coa-calculator-backend.herokuapp.com/monsters\";\n    }\n    fetch(url)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        // setBusy(false);\n        setMonsterData(data);\n      })\n      .catch((error) => {\n        console.log(\"Error on fetch Monsters data:\", error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Alert severity=\"info\">Missing or bugged icons will be updated once new sprites are released</Alert>\n\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Combat Level\"}\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Target Combat Level\"}\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateMonster}\n        skillsData={monsterData}\n        skill=\"Combat\"\n      // currentLevel={9999}\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={monster}\n        boosts={boosts}\n        keywords={[\"\"]}\n        skill=\"Combat\"\n      />\n      {/* <Slider sliderName={\"Your Smithing XP\"}/>\n      <Slider sliderName={\"Ore 1\"}/>\n      <Slider sliderName={\"Ore 2\"}/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Combat;\n","import React from \"react\";\n\nimport { Tabs, Tab, Box } from \"@mui/material\";\n// import { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nimport Header from \"./components/Header\";\nimport Smithing from \"./tabs/Smithing\";\nimport Crafting from \"./tabs/Crafting\";\nimport Cooking from \"./tabs/Cooking\";\nimport Tailoring from \"./tabs/Tailoring\";\nimport Mining from \"./tabs/Mining\";\nimport Woodcutting from \"./tabs/Woodcutting\";\nimport Fishing from \"./tabs/Fishing\";\nimport Combat from \"./tabs/Combat\";\n\n// import Brightness4Icon from '@mui/icons-material/Brightness4';\n// import Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst Home = (props) => {\n  const { match, history, currentTheme, updateCurrentTheme } = props;\n  const { params } = match;\n  const { page } = params;\n  // const currTheme = currentTheme;\n  // console.log('Current theme', currentTheme);\n\n  const tabNameToIndex = {\n    0: \"smithing\",\n    1: \"crafting\",\n    2: \"cooking\",\n    3: \"tailoring\",\n    4: \"mining\",\n    5: \"woodcutting\",\n    6: \"fishing\",\n    7: \"combat\",\n  };\n\n  const indexToTabName = {\n    smithing: 0,\n    crafting: 1,\n    cooking: 2,\n    tailoring: 3,\n    mining: 4,\n    woodcutting: 5,\n    fishing: 6,\n    combat: 7,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState(indexToTabName[page]);\n\n  const handleChange = (event, newValue) => {\n    console.log(newValue);\n    history.push(`/${tabNameToIndex[newValue]}`);\n    setSelectedTab(newValue);\n  };\n\n  // const [currentTheme, setCurrentTheme] = useState(\"dark\");\n  // const updateCurrentTheme = () => {\n  //   if (currentTheme === \"dark\") {\n  //     setCurrentTheme(\"light\");\n  //   } else {\n  //     setCurrentTheme(\"dark\");\n  //   }\n  // };\n\n  // const theme = createTheme({\n  //   palette: {\n  //     mode: currentTheme,\n  //   },\n  // });\n\n  return (\n    <>\n      <Header\n        title=\"Curse of Aros Skills Calculator\"\n        updateTheme={updateCurrentTheme}\n        currentTheme={currentTheme}\n      />\n      <Box sx={{ width: \"100%\" }}>\n        <Box sx={{ borderBottom: 1, borderColor: \"divider\", marginBottom: 1 }}>\n          <Tabs\n            value={selectedTab}\n            onChange={handleChange}\n            variant=\"scrollable\"\n            // scrollButtons={false}\n          >\n            <Tab label=\"Smithing\" />\n            <Tab label=\"Crafting\" />\n            <Tab label=\"Cooking\" />\n            <Tab label=\"Tailoring\" />\n            <Tab label=\"Mining\" />\n            <Tab label=\"Woodcutting\" />\n            <Tab label=\"Fishing\" />\n            <Tab label=\"Combat\"/>\n          </Tabs>\n          {/* <Tabs\n            value={selectedTab}\n            onChange={handleChange}\n            variant=\"scrollable\"\n          >\n          <Tab label=\"Combat\"/>\n          </Tabs> */}\n        </Box>\n      </Box>\n      {selectedTab === 0 && <Smithing />}\n      {selectedTab === 1 && <Crafting />}\n      {selectedTab === 2 && <Cooking />}\n      {selectedTab === 3 && <Tailoring />}\n      {selectedTab === 4 && <Mining />}\n      {selectedTab === 5 && <Woodcutting />}\n      {selectedTab === 6 && <Fishing />}\n      {selectedTab === 7 && <Combat />}\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport HttpsRedirect from \"react-https-redirect\";\n\n// import { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nconst App = ({currentTheme, updateCurrentTheme}) => {\n  // const [currentTheme, setCurrentTheme] = useState(\"dark\");\n  // const updateCurrentTheme = () => {\n  //   if (currentTheme === \"dark\") {\n  //     setCurrentTheme(\"light\");\n  //   } else {\n  //     setCurrentTheme(\"dark\");\n  //   }\n  //   updateTheme(currentTheme);\n  // };\n\n  // const theme = createTheme({\n  //   palette: {\n  //     mode: currentTheme,\n  //   },\n  // });\n\n  return (\n    // <ThemeProvider theme={theme}>\n      <HttpsRedirect>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/smithing\" />\n          <Route\n            exact\n            path=\"/:page?\"\n            render={(props) => (\n              <Home\n                {...props}\n                currentTheme={currentTheme}\n                updateCurrentTheme={updateCurrentTheme}\n              />\n            )}\n          />\n        </Switch>\n      </HttpsRedirect>\n    // </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\n\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nlet currentTheme = \"dark\";\nconst theme = createTheme({\n  palette: {\n    mode: currentTheme,\n  },\n});\n// const updateTheme = (theme) => {\n//   currentTheme = theme;\n//   // console.log(\"updated theme\", currentTheme);\n//   theme = createTheme({\n//     palette: {\n//       mode: theme,\n//     },\n//   });\n// };\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}